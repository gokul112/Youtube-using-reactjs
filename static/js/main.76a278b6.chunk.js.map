{"version":3,"sources":["components/Header.js","Api/youtube.js","components/VideoItem.js","components/VideoList.js","components/VideoDetails.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","useState","search","setsearch","className","href","title","type","aria-label","onChange","e","target","value","placeholder","onKeyPress","event","key","onSubmit","onClick","preventDefault","handleSubmit","axios","create","baseURL","params","part","maxResult","VideoItem","class","onVideoSelect","video","alt","src","snippet","thumbnails","medium","url","VideoList","listOfVideos","videos","map","id","videoId","VideoDetails","videoSrc","frameBorder","height","width","channelTitle","description","setVideos","selectedVideo","setSelectedVideo","searchTerm","a","youtube","get","maxResults","q","data","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76a278b6.chunk.js","sourcesContent":["import React,{useState} from 'react'\n\nfunction Header(props) {\n    const [search, setsearch] = useState(\"\")\n\n    function searchChange(e){\n        setsearch(e.target.value)\n    }\n\n    function handleSubmit(e){\n        e.preventDefault();\n        props.onSubmit(search);\n    }\n    const onKeyPress = (event) => {\n      if (event.key === \"Enter\") {\n        props.onSubmit(search);\n      }\n    }\n    return (\n        <nav className=\"navbar\">\n      <div className=\"container-fluid\">\n        <div className=\"navbar-header\">\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n            <div className=\"d-inline p-200\">\n                <input className=\"input search\" type=\"search\" aria-label=\"search\" onChange={searchChange} placeholder=\"Search\" onKeyPress={onKeyPress}/>\n                <button className=\"but\" onClick={(e)=>handleSubmit(e)} >\n                <i className=\"fa fa-search\"></i>\n                </button>\n             </div>\n        </div>\n      </div>\n    </nav>\n    )\n}\n\nexport default Header\n","import axios from 'axios';\n\nexport default axios.create({\n    baseURL:'https://www.googleapis.com/youtube/v3',\n    params:{\n        part : 'snippet',\n        maxResult : 15,\n        key: 'AIzaSyD9usn3SsZ6loZrlw619om0AGx0mALOGSY',\n    }\n});","import React from 'react'\n\nfunction VideoItem(props) {\n    return (\n\n<div class=\"bs-example p-10\">\n    <div class=\"card mx-500 cursor\" onClick={() => props.onVideoSelect(props.video)}>\n        <div class=\"row no-gutters\">\n            <div class=\"col-sm-5\">\n                <img alt=\"thumbnail\" src={props.video.snippet.thumbnails.medium.url} class=\"card-img-top h-100\"/>\n            </div>\n            <div class=\"col-sm-7\">\n                <div class=\"card-body\">\n                <h5 class=\"card-title\">{props.video.snippet.title}</h5>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n   \n    )\n}\n\nexport default VideoItem\n","import React from 'react'\nimport VideoItem from './VideoItem'\n\nfunction VideoList(props) {\n    const listOfVideos = props.videos.map(video => (\n        <VideoItem\n          onVideoSelect={props.onVideoSelect}\n          key={video.id.videoId}\n          video={video}\n        />\n      ));\n    return (\n        <div>\n           {listOfVideos}\n        </div>\n    )\n}\n\nexport default VideoList\n","import React from 'react'\nimport VideoList from './VideoList';\n\nfunction VideoDetails(props) {\n    if (!props.video) return <div className=\"text-center p-20\">Search the videos and enjoy it...</div>;\n\n    const videoSrc = `https://www.youtube.com/embed/${props.video.id.videoId}`;\n  \n\n    return (\n        <div className=\"container-fluid p-20\">\n            <div className=\"row\">\n            <div className=\"col-md-8\">\n             <iframe\n          frameBorder=\"0\"\n          height=\"500px\"\n          width=\"100%\"\n          title=\"Video Player\"\n          src={videoSrc}\n        />\n        <div className=\"p-15\">\n        <h4>{props.video.snippet.title} - {props.video.snippet.channelTitle}</h4>\n        <h5>         {props.video.snippet.channelTitle} </h5>\n        <p>{props.video.snippet.description}</p>\n        </div>\n        </div>\n        <div className=\"col-md-4\">\n            <VideoList videos={props.videos} onVideoSelect={props.onVideoSelect} />\n</div>\n        </div>\n        </div>\n    )\n}\n\nexport default VideoDetails\n","import React,{useState} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport youtube from \"./Api/youtube\";\nimport VideoDetails from './components/VideoDetails';\n\n\nexport default () => {\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n\n\n  async function handleSubmit(searchTerm) {\n    const { data: { items: videos } } = await youtube.get(\"search\", {\n      params: {\n        part: \"snippet\",\n        maxResults: 15,\n        key: 'AIzaSyD9usn3SsZ6loZrlw619om0AGx0mALOGSY',\n        q: searchTerm,\n      }\n    });\n\n    setVideos(videos);\n    setSelectedVideo(videos[0]);\n  }\n  return (\n    <div className=\"App\">\n        <Header title=\"YouTube\" onSubmit={handleSubmit}/>\n        <VideoDetails video={selectedVideo} videos={videos} onVideoSelect={setSelectedVideo} />\n    </div>\n  );\n\n  \n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}